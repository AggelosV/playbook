import os
import pandas as pd
import seaborn as sns
import hashlib
import yara
from virustotal_python import Virustotal
from IPython.display import display, Markdown

# Set display options for pandas and seaborn
pd.set_option('display.max_columns', None)
sns.set(style="whitegrid")

# Initialize VirusTotal API with your key
V_API_KEY = '58e37b1a6e72b955bcc35ca6abf7a4064b45c90b5e740ecf961da59bb8cf5917'
vtotal = Virustotal(API_KEY=V_API_KEY, API_VERSION="v3")

def defang_filename(filepath, filename):
    """Renames file to defang and prevent accidental execution."""
    defanged_name = filename.replace('.', '[dot]').replace('/', '[slash]').replace(':', '[colon]')
    new_filepath = filepath.replace(filename, defanged_name)
    os.rename(filepath, new_filepath)
    return defanged_name, new_filepath

def sha256sum(filepath):
    """Compute SHA256 hash of a file."""
    h = hashlib.sha256()
    with open(filepath, 'rb') as file:
        for chunk in iter(lambda: file.read(4096), b""):
            h.update(chunk)
    return h.hexdigest()

def check_virustotal(hash):
    """Query VirusTotal API for a given hash and return the detection score."""
    try:
        resp = vtotal.request(f"files/{hash}")
        score = f"{resp.data['attributes']['last_analysis_stats']['malicious']} / {sum(resp.data['attributes']['last_analysis_stats'].values())}" if resp.data['attributes']['last_analysis_stats']['malicious'] > 0 else "No detections"
    except Exception as e:
        score = f"Error: {str(e)}"
    return score

def load_yara_rules(directory):
    """Load and compile YARA rules from the directory, skip invalid files."""
    rules = {}
    for file in os.listdir(directory):
        if file.endswith('.yar'):
            path = os.path.join(directory, file)
            try:
                with open(path, 'r') as f:
                    rules[file] = f.read()
            except Exception as e:
                print(f"Error reading {file}: {e}")
    try:
        compiled_rules = yara.compile(sources=rules)
    except yara.SyntaxError as e:
        print(f"YARA compilation error: {e}")
        compiled_rules = None
    return compiled_rules

def scan_with_yara(filepath, rules):
    """Scan a file with YARA rules to detect patterns."""
    if rules:
        matches = rules.match(filepath)
        return "Matches found: " + ", ".join([match.rule for match in matches]) if matches else "No matches"
    return "YARA rules not compiled due to errors."

def process_directory(file_directory, rule_directory):
    """Process files: apply YARA, check VirusTotal, defang, display results."""
    rules = load_yara_rules(rule_directory)
    for filename in os.listdir(file_directory):
        filepath = os.path.join(file_directory, filename)
        if os.path.isfile(filepath):
            defanged_name, new_filepath = defang_filename(filepath, filename)
            file_hash = sha256sum(new_filepath)
            vt_score = check_virustotal(file_hash)
            yara_results = scan_with_yara(new_filepath, rules)
            display(Markdown(f"**File Name:** {filename}\n\n**Defang:** Completed\n\n**SHA256:** {file_hash}\n\n**VirusTotal Score:** {vt_score}\n\nYara  {yara_results}\n---\n"))

# Set the paths directly in the script
file_directory_path = '/home/aggelos/Desktop/notebook/malicious'
yara_rule_directory_path = '/home/aggelos/Desktop/notebook/yara/test'

# Execute processing on the directory
process_directory(file_directory_path, yara_rule_directory_path)

